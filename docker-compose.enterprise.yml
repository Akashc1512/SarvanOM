version: '3.8'

services:
  # API Gateway - Main Entry Point
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - GATEWAY_PORT=8000
      - AUTH_SERVICE_URL=http://auth:8001
      - SEARCH_SERVICE_URL=http://search:8002
      - SYNTHESIS_SERVICE_URL=http://synthesis:8003
      - FACT_CHECK_SERVICE_URL=http://fact-check:8004
      - RETRIEVAL_SERVICE_URL=http://retrieval:8005
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
      - qdrant
      - meilisearch
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Authentication Service
  auth:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-auth
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SERVICE_PORT=8001
      - SERVICE_NAME=auth
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Search Service
  search:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-search
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SERVICE_PORT=8002
      - SERVICE_NAME=search
    volumes:
      - ./logs:/app/logs
    depends_on:
      - qdrant
      - meilisearch
      - redis
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Synthesis Service
  synthesis:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-synthesis
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SERVICE_PORT=8003
      - SERVICE_NAME=synthesis
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Fact Check Service
  fact-check:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-fact-check
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SERVICE_PORT=8004
      - SERVICE_NAME=fact-check
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Retrieval Service
  retrieval:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
    container_name: sarvanom-retrieval
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - SERVICE_PORT=8005
      - SERVICE_NAME=retrieval
    volumes:
      - ./logs:/app/logs
    depends_on:
      - qdrant
      - meilisearch
      - redis
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: sarvanom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - auth
      - search
      - synthesis
      - fact-check
      - retrieval
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sarvanom-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sarvanom-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sarvanom_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sarvanom_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.12.0
    container_name: sarvanom-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: sarvanom-meilisearch
    ports:
      - "7700:7700"
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - sarvanom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sarvanom-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sarvanom-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sarvanom-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sarvanom-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sarvanom-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sarvanom-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  meilisearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sarvanom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
