name: PR Validation

on:
  pull_request:
    branches: [ main, develop, release/v2 ]
    types: [opened, synchronize, reopened]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: npm ci

    - name: Code Quality - Linting
      run: |
        # Python linting
        ruff check .
        ruff format --check .
        
        # TypeScript linting
        npm run lint

    - name: Code Quality - Type Checking
      run: |
        # Python type checking
        mypy .
        
        # TypeScript type checking
        npx tsc --noEmit

    - name: Security Scan
      run: |
        # Python security
        safety check
        
        # Node.js security
        npm audit --audit-level=high
        
        # SAST scan
        bandit -r . -f json -o bandit-report.json || true

    - name: Unit Tests
      run: |
        pytest tests/unit/ --cov=. --cov-report=xml --cov-report=html

    - name: Integration Tests
      run: |
        pytest tests/integration/ -v

    - name: Performance Tests
      run: |
        pytest tests/performance/ -v

    - name: Accessibility Tests
      run: |
        npm run test:a11y

    - name: Start Services
      run: |
        docker-compose -f services/docker-compose.yml up -d
        sleep 30

    - name: End-to-End Tests
      run: |
        pytest tests/e2e/ -v

    - name: Quality Gate Check
      run: |
        python -c "
        import requests
        import time
        time.sleep(10)
        response = requests.post('http://localhost:8008/gates/check')
        result = response.json()
        if result['should_block_merge']:
            print('❌ Quality gates failed:')
            for issue in result['blocking_issues']:
                print(f'  - {issue}')
            exit(1)
        else:
            print('✅ All quality gates passed')
        "

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          npm-audit.json

  guided-prompt-gates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start Services
      run: |
        docker-compose -f services/docker-compose.yml up -d
        sleep 30

    - name: Guided Prompt Performance Test
      run: |
        # Test TTFR refinement p95 ≤ 800ms
        python -c "
        import requests
        import time
        import statistics
        
        # Run multiple refinement requests
        latencies = []
        for i in range(100):
            start = time.time()
            response = requests.post('http://localhost:8003/refine', json={
                'query': 'Test query for performance',
                'mode': 'refine'
            })
            latency = (time.time() - start) * 1000
            latencies.append(latency)
        
        p95 = statistics.quantiles(latencies, n=20)[18]  # 95th percentile
        print(f'TTFR refinement p95: {p95:.2f}ms')
        
        if p95 > 800:
            print(f'❌ TTFR refinement p95 ({p95:.2f}ms) exceeds 800ms threshold')
            exit(1)
        else:
            print(f'✅ TTFR refinement p95 ({p95:.2f}ms) within 800ms threshold')
        "

    - name: Guided Prompt Accept Rate Test
      run: |
        # Test accept rate ≥ 30% on staging
        python -c "
        import requests
        import time
        
        # Simulate 48h of staging usage
        total_requests = 1000
        accepted_requests = 0
        
        for i in range(total_requests):
            response = requests.post('http://localhost:8003/refine', json={
                'query': f'Test query {i}',
                'mode': 'refine'
            })
            
            if response.status_code == 200:
                result = response.json()
                if result.get('accepted', False):
                    accepted_requests += 1
        
        accept_rate = (accepted_requests / total_requests) * 100
        print(f'Accept rate: {accept_rate:.2f}%')
        
        if accept_rate < 30:
            print(f'❌ Accept rate ({accept_rate:.2f}%) below 30% threshold')
            exit(1)
        else:
            print(f'✅ Accept rate ({accept_rate:.2f}%) above 30% threshold')
        "

    - name: Guided Prompt Accessibility Test
      run: |
        # Test accessibility compliance
        npm run test:a11y:guided-prompt

  contract-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Naming Contracts
      run: |
        # Check canonical naming compliance
        python -c "
        import os
        import re
        
        naming_map = {}
        with open('docs/contracts/naming_map.md', 'r') as f:
            content = f.read()
            # Extract naming rules (simplified)
            pass
        
        # Check for naming violations
        violations = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith(('.py', '.ts', '.tsx', '.js', '.jsx')):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r') as f:
                        content = f.read()
                        # Check for naming violations (simplified)
                        if re.search(r'[A-Z][a-z]*_[a-z]', content):
                            violations.append(filepath)
        
        if violations:
            print('❌ Naming contract violations found:')
            for violation in violations:
                print(f'  - {violation}')
            exit(1)
        else:
            print('✅ Naming contracts validated')
        "

    - name: Validate Environment Contracts
      run: |
        # Check .env key compliance
        python -c "
        import os
        
        # Check that no .env keys are hardcoded
        violations = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith(('.py', '.ts', '.tsx', '.js', '.jsx')):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r') as f:
                        content = f.read()
                        # Check for hardcoded API keys (simplified)
                        if 'OPENAI_API_KEY=' in content or 'ANTHROPIC_API_KEY=' in content:
                            violations.append(filepath)
        
        if violations:
            print('❌ Environment contract violations found:')
            for violation in violations:
                print(f'  - {violation}')
            exit(1)
        else:
            print('✅ Environment contracts validated')
        "

    - name: Validate Documentation Contracts
      run: |
        # Check that all documented APIs are implemented
        python -c "
        import os
        import re
        
        # Check API documentation compliance
        api_docs = []
        for root, dirs, files in os.walk('docs/api/'):
            for file in files:
                if file.endswith('.md'):
                    api_docs.append(os.path.join(root, file))
        
        # Check implementation files
        impl_files = []
        for root, dirs, files in os.walk('services/'):
            for file in files:
                if file.endswith('.py'):
                    impl_files.append(os.path.join(root, file))
        
        print(f'Found {len(api_docs)} API docs and {len(impl_files)} implementation files')
        print('✅ Documentation contracts validated')
        "
