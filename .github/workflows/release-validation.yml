name: Release Validation

on:
  push:
    branches: [ main, release/v2 ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  full-validation:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci

    - name: Full Test Suite
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html -v

    - name: Load Testing
      run: |
        # Install k6
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Start services
        docker-compose -f services/docker-compose.yml up -d
        sleep 60
        
        # Run load tests
        k6 run tests/load/load-test.js

    - name: Security Audit
      run: |
        # Python security audit
        bandit -r . -f json -o bandit-report.json
        
        # Node.js security audit
        npm audit --audit-level=high --json > npm-audit.json
        
        # Check for secrets
        trufflehog filesystem . --no-verification

    - name: Performance Benchmarks
      run: |
        # Start services
        docker-compose -f services/docker-compose.yml up -d
        sleep 60
        
        # Run performance benchmarks
        python tests/performance/benchmark.py

    - name: Accessibility Audit
      run: |
        # Run comprehensive accessibility tests
        npm run test:a11y:comprehensive

    - name: Contract Compliance Check
      run: |
        # Validate all contracts
        python scripts/validate_contracts.py

    - name: Upload Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-reports
        path: |
          coverage.xml
          bandit-report.json
          npm-audit.json
          performance-report.json
          accessibility-report.json

  canary-deployment:
    runs-on: ubuntu-latest
    needs: full-validation
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start Services
      run: |
        docker-compose -f services/docker-compose.yml up -d
        sleep 60

    - name: Start Canary Deployment
      run: |
        python -c "
        import requests
        import time
        
        # Start canary deployment
        response = requests.post('http://localhost:8008/deployment/start-canary', json={
            'environment': 'staging',
            'version': '${{ github.sha }}'
        })
        
        if response.status_code == 200:
            print('‚úÖ Canary deployment started')
        else:
            print(f'‚ùå Failed to start canary deployment: {response.text}')
            exit(1)
        "

    - name: Monitor Canary - Phase 1 (5% traffic)
      run: |
        python -c "
        import requests
        import time
        
        # Update to 5% traffic
        response = requests.post('http://localhost:8008/deployment/update-canary', json={
            'environment': 'staging',
            'version': '${{ github.sha }}',
            'percentage': 5.0
        })
        
        print('Phase 1: 5% traffic for 30 minutes')
        time.sleep(1800)  # 30 minutes
        
        # Check metrics
        response = requests.get('http://localhost:8006/metrics/performance')
        if response.status_code == 200:
            metrics = response.json()
            error_rate = metrics.get('error_rate', 0)
            response_time = metrics.get('response_time_p95', 0)
            
            if error_rate > 0.1 or response_time > 5500:  # 10% degradation
                print(f'‚ùå Canary metrics exceeded thresholds: error_rate={error_rate}, response_time={response_time}')
                exit(1)
            else:
                print(f'‚úÖ Canary metrics within thresholds: error_rate={error_rate}, response_time={response_time}')
        "

    - name: Monitor Canary - Phase 2 (25% traffic)
      run: |
        python -c "
        import requests
        import time
        
        # Update to 25% traffic
        response = requests.post('http://localhost:8008/deployment/update-canary', json={
            'environment': 'staging',
            'version': '${{ github.sha }}',
            'percentage': 25.0
        })
        
        print('Phase 2: 25% traffic for 1 hour')
        time.sleep(3600)  # 1 hour
        
        # Check metrics
        response = requests.get('http://localhost:8006/metrics/performance')
        if response.status_code == 200:
            metrics = response.json()
            error_rate = metrics.get('error_rate', 0)
            response_time = metrics.get('response_time_p95', 0)
            
            if error_rate > 0.1 or response_time > 5500:
                print(f'‚ùå Canary metrics exceeded thresholds: error_rate={error_rate}, response_time={response_time}')
                exit(1)
            else:
                print(f'‚úÖ Canary metrics within thresholds: error_rate={error_rate}, response_time={response_time}')
        "

    - name: Monitor Canary - Phase 3 (50% traffic)
      run: |
        python -c "
        import requests
        import time
        
        # Update to 50% traffic
        response = requests.post('http://localhost:8008/deployment/update-canary', json={
            'environment': 'staging',
            'version': '${{ github.sha }}',
            'percentage': 50.0
        })
        
        print('Phase 3: 50% traffic for 2 hours')
        time.sleep(7200)  # 2 hours
        
        # Check metrics
        response = requests.get('http://localhost:8006/metrics/performance')
        if response.status_code == 200:
            metrics = response.json()
            error_rate = metrics.get('error_rate', 0)
            response_time = metrics.get('response_time_p95', 0)
            
            if error_rate > 0.1 or response_time > 5500:
                print(f'‚ùå Canary metrics exceeded thresholds: error_rate={error_rate}, response_time={response_time}')
                exit(1)
            else:
                print(f'‚úÖ Canary metrics within thresholds: error_rate={error_rate}, response_time={response_time}')
        "

    - name: Promote to 100%
      run: |
        python -c "
        import requests
        
        # Promote to 100%
        response = requests.post('http://localhost:8008/deployment/promote', json={
            'environment': 'staging',
            'version': '${{ github.sha }}'
        })
        
        if response.status_code == 200:
            print('‚úÖ Deployment promoted to 100%')
        else:
            print(f'‚ùå Failed to promote deployment: {response.text}')
            exit(1)
        "

    - name: Final Validation
      run: |
        python -c "
        import requests
        import time
        
        # Wait for deployment to stabilize
        time.sleep(300)  # 5 minutes
        
        # Run final validation tests
        response = requests.get('http://localhost:8006/health')
        if response.status_code != 200:
            print('‚ùå Health check failed')
            exit(1)
        
        # Check performance metrics
        response = requests.get('http://localhost:8006/metrics/performance')
        if response.status_code == 200:
            metrics = response.json()
            error_rate = metrics.get('error_rate', 0)
            response_time = metrics.get('response_time_p95', 0)
            
            if error_rate > 0.1 or response_time > 5000:
                print(f'‚ùå Final validation failed: error_rate={error_rate}, response_time={response_time}')
                exit(1)
            else:
                print(f'‚úÖ Final validation passed: error_rate={error_rate}, response_time={response_time}')
        "

  production-deployment:
    runs-on: ubuntu-latest
    needs: canary-deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production..."
        # Production deployment logic would go here
        # This would typically involve:
        # 1. Building production images
        # 2. Updating Kubernetes manifests
        # 3. Rolling out the deployment
        # 4. Running smoke tests
        
        echo "‚úÖ Production deployment completed"

    - name: Post-Deployment Validation
      run: |
        echo "üîç Running post-deployment validation..."
        # Post-deployment validation would go here
        # This would typically involve:
        # 1. Health checks
        # 2. Performance validation
        # 3. User acceptance testing
        # 4. Monitoring setup
        
        echo "‚úÖ Post-deployment validation completed"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback Deployment
      run: |
        python -c "
        import requests
        
        # Rollback deployment
        response = requests.post('http://localhost:8008/deployment/rollback', json={
            'environment': 'staging',
            'version': '${{ github.sha }}',
            'reason': 'Automated rollback due to validation failure'
        })
        
        if response.status_code == 200:
            print('‚úÖ Deployment rolled back successfully')
        else:
            print(f'‚ùå Failed to rollback deployment: {response.text}')
            exit(1)
        "

    - name: Notify Team
      run: |
        echo "üö® Deployment rollback completed"
        # Notification logic would go here
        # This would typically involve:
        # 1. Slack notification
        # 2. Email alert
        # 3. Incident ticket creation
        # 4. Post-mortem scheduling
