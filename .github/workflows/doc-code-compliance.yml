name: Doc→Code Compliance Suite

on:
  pull_request:
    branches: [ main, develop, release/v2 ]
  push:
    branches: [ main, develop, release/v2 ]

jobs:
  doc-code-compliance:
    name: Doc→Code Compliance Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Doc→Code Compliance Suite
      run: |
        python scripts/compliance_checker.py
      env:
        ENVIRONMENT: ci
        KEYLESS_FALLBACKS_ENABLED: true
    
    - name: Check compliance results and fail if issues found
      run: |
        echo "Checking compliance results..."
        
        # Check for unknown environment keys
        if [ -f "reports/compliance/env_gaps.json" ]; then
          UNKNOWN_KEYS=$(python -c "
          import json
          try:
              with open('reports/compliance/env_gaps.json', 'r') as f:
                  data = json.load(f)
              unknown = data.get('unknown_keys', [])
              if unknown:
                  print('UNKNOWN_ENV_KEYS_FOUND')
                  for key in unknown:
                      print(f'  - {key}')
          except Exception as e:
              print(f'Error reading env_gaps.json: {e}')
          ")
          
          if [[ "$UNKNOWN_KEYS" == *"UNKNOWN_ENV_KEYS_FOUND"* ]]; then
            echo "❌ FAIL: Unknown environment keys detected"
            echo "$UNKNOWN_KEYS"
            exit 1
          fi
        fi
        
        # Check for synonyms
        if [ -f "reports/compliance/env_gaps.json" ]; then
          SYNONYMS=$(python -c "
          import json
          try:
              with open('reports/compliance/env_gaps.json', 'r') as f:
                  data = json.load(f)
              synonyms = data.get('synonyms', [])
              if synonyms:
                  print('SYNONYMS_FOUND')
                  for synonym in synonyms:
                      print(f'  - {synonym}')
          except Exception as e:
              print(f'Error reading env_gaps.json: {e}')
          ")
          
          if [[ "$SYNONYMS" == *"SYNONYMS_FOUND"* ]]; then
            echo "❌ FAIL: Environment variable synonyms detected"
            echo "$SYNONYMS"
            exit 1
          fi
        fi
        
        # Check backend compliance
        if [ -f "reports/compliance/backend.md" ]; then
          BACKEND_FAILS=$(grep -c "❌ FAIL" reports/compliance/backend.md || true)
          if [ "$BACKEND_FAILS" -gt 0 ]; then
            echo "❌ FAIL: Backend compliance issues detected ($BACKEND_FAILS failures)"
            echo "Backend compliance failures:"
            grep "❌ FAIL" reports/compliance/backend.md || true
            exit 1
          fi
        fi
        
        # Check frontend compliance
        if [ -f "reports/compliance/frontend.md" ]; then
          FRONTEND_FAILS=$(grep -c "❌ FAIL" reports/compliance/frontend.md || true)
          if [ "$FRONTEND_FAILS" -gt 0 ]; then
            echo "❌ FAIL: Frontend compliance issues detected ($FRONTEND_FAILS failures)"
            echo "Frontend compliance failures:"
            grep "❌ FAIL" reports/compliance/frontend.md || true
            exit 1
          fi
        fi
        
        echo "✅ PASS: All compliance checks passed"
    
    - name: Upload compliance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-reports
        path: |
          reports/compliance/
          reports/wiring/
          reports/duplications/

  wiring-validation:
    name: Wiring Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run wiring checker
      run: |
        python scripts/wiring_checker.py
    
    - name: Check wiring results
      run: |
        echo "Checking wiring validation results..."
        
        # Check for missing endpoints
        if [ -f "reports/wiring/backend_endpoints.md" ]; then
          MISSING_ENDPOINTS=$(grep -c "Not Found" reports/wiring/backend_endpoints.md || true)
          if [ "$MISSING_ENDPOINTS" -gt 0 ]; then
            echo "❌ FAIL: Missing endpoints detected ($MISSING_ENDPOINTS missing)"
            echo "Missing endpoints:"
            grep "Not Found" reports/wiring/backend_endpoints.md || true
            exit 1
          fi
        fi
        
        # Check for missing health/metrics endpoints
        if [ -f "reports/wiring/backend_endpoints.md" ]; then
          MISSING_HEALTH=$(grep -c "No" reports/wiring/backend_endpoints.md | grep -c "health" || true)
          MISSING_METRICS=$(grep -c "No" reports/wiring/backend_endpoints.md | grep -c "metrics" || true)
          if [ "$MISSING_HEALTH" -gt 0 ] || [ "$MISSING_METRICS" -gt 0 ]; then
            echo "❌ FAIL: Missing health/metrics endpoints detected"
            echo "Health/Metrics status:"
            grep -E "(health|metrics)" reports/wiring/backend_endpoints.md || true
            exit 1
          fi
        fi
        
        echo "✅ PASS: All wiring validation checks passed"
    
    - name: Upload wiring reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: wiring-reports
        path: reports/wiring/

  key-presence-check:
    name: Key Presence Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check key presence and keyless fallback configuration
      run: |
        echo "Checking key presence and keyless fallback configuration..."
        
        # Check if keyless fallbacks are enabled
        KEYLESS_ENABLED=${KEYLESS_FALLBACKS_ENABLED:-false}
        echo "Keyless fallbacks enabled: $KEYLESS_ENABLED"
        
        # Check for required keys in each lane
        MISSING_KEYS=()
        ACTIONABLE_MESSAGES=()
        
        # Web Search Lane
        if [ -z "$BRAVE_SEARCH_API_KEY" ] && [ -z "$SERPAPI_KEY" ]; then
          MISSING_KEYS+=("Web Search Lane: BRAVE_SEARCH_API_KEY and SERPAPI_KEY")
          if [ "$KEYLESS_ENABLED" != "true" ]; then
            ACTIONABLE_MESSAGES+=("❌ Web Search Lane has no keys and keyless fallback is disabled. Either:")
            ACTIONABLE_MESSAGES+=("   1. Add BRAVE_SEARCH_API_KEY or SERPAPI_KEY to environment")
            ACTIONABLE_MESSAGES+=("   2. Enable keyless fallbacks by setting KEYLESS_FALLBACKS_ENABLED=true")
          fi
        fi
        
        # News Lane
        if [ -z "$GUARDIAN_OPEN_PLATFORM_KEY" ] && [ -z "$NEWSAPI_KEY" ]; then
          MISSING_KEYS+=("News Lane: GUARDIAN_OPEN_PLATFORM_KEY and NEWSAPI_KEY")
          if [ "$KEYLESS_ENABLED" != "true" ]; then
            ACTIONABLE_MESSAGES+=("❌ News Lane has no keys and keyless fallback is disabled. Either:")
            ACTIONABLE_MESSAGES+=("   1. Add GUARDIAN_OPEN_PLATFORM_KEY or NEWSAPI_KEY to environment")
            ACTIONABLE_MESSAGES+=("   2. Enable keyless fallbacks by setting KEYLESS_FALLBACKS_ENABLED=true")
          fi
        fi
        
        # Markets Lane
        if [ -z "$ALPHAVANTAGE_KEY" ]; then
          MISSING_KEYS+=("Markets Lane: ALPHAVANTAGE_KEY")
          if [ "$KEYLESS_ENABLED" != "true" ]; then
            ACTIONABLE_MESSAGES+=("❌ Markets Lane has no keys and keyless fallback is disabled. Either:")
            ACTIONABLE_MESSAGES+=("   1. Add ALPHAVANTAGE_KEY to environment")
            ACTIONABLE_MESSAGES+=("   2. Enable keyless fallbacks by setting KEYLESS_FALLBACKS_ENABLED=true")
          fi
        fi
        
        # LLM Providers
        if [ -z "$OPENAI_API_KEY" ] && [ -z "$ANTHROPIC_API_KEY" ]; then
          MISSING_KEYS+=("LLM Providers: OPENAI_API_KEY and ANTHROPIC_API_KEY")
          if [ "$KEYLESS_ENABLED" != "true" ]; then
            ACTIONABLE_MESSAGES+=("❌ LLM Providers have no keys and keyless fallback is disabled. Either:")
            ACTIONABLE_MESSAGES+=("   1. Add OPENAI_API_KEY or ANTHROPIC_API_KEY to environment")
            ACTIONABLE_MESSAGES+=("   2. Enable keyless fallbacks by setting KEYLESS_FALLBACKS_ENABLED=true")
          fi
        fi
        
        # Report results
        if [ ${#MISSING_KEYS[@]} -gt 0 ]; then
          echo "Missing keys detected:"
          for key in "${MISSING_KEYS[@]}"; do
            echo "  - $key"
          done
          
          if [ ${#ACTIONABLE_MESSAGES[@]} -gt 0 ]; then
            echo ""
            echo "Actionable messages:"
            for message in "${ACTIONABLE_MESSAGES[@]}"; do
              echo "$message"
            done
            echo ""
            echo "❌ FAIL: Key presence check failed - lanes without keys and disabled keyless fallbacks"
            exit 1
          else
            echo "✅ PASS: Missing keys are acceptable because keyless fallbacks are enabled"
          fi
        else
          echo "✅ PASS: All required keys are present"
        fi
      env:
        KEYLESS_FALLBACKS_ENABLED: true
        # Note: In real CI, these would be set as secrets
        # BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY }}
        # SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
        # GUARDIAN_OPEN_PLATFORM_KEY: ${{ secrets.GUARDIAN_OPEN_PLATFORM_KEY }}
        # NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        # ALPHAVANTAGE_KEY: ${{ secrets.ALPHAVANTAGE_KEY }}
        # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        # ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        # GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  duplicate-dead-code-scan:
    name: Duplicate/Dead Code Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run duplicate scanner
      run: |
        python scripts/duplicate_scanner.py
    
    - name: Check for critical duplications
      run: |
        echo "Checking for critical duplications..."
        
        # Check for high-severity duplications
        if [ -f "reports/duplications/backend.csv" ]; then
          HIGH_SEVERITY_DUPS=$(grep -c "high" reports/duplications/backend.csv || true)
          if [ "$HIGH_SEVERITY_DUPS" -gt 0 ]; then
            echo "⚠️  WARNING: High-severity duplications detected ($HIGH_SEVERITY_DUPS found)"
            echo "High-severity duplications:"
            grep "high" reports/duplications/backend.csv || true
            echo ""
            echo "These should be addressed but do not block the build"
          fi
        fi
        
        if [ -f "reports/duplications/frontend.csv" ]; then
          HIGH_SEVERITY_DUPS=$(grep -c "high" reports/duplications/frontend.csv || true)
          if [ "$HIGH_SEVERITY_DUPS" -gt 0 ]; then
            echo "⚠️  WARNING: High-severity duplications detected ($HIGH_SEVERITY_DUPS found)"
            echo "High-severity duplications:"
            grep "high" reports/duplications/frontend.csv || true
            echo ""
            echo "These should be addressed but do not block the build"
          fi
        fi
        
        echo "✅ PASS: Duplicate scan completed (warnings are non-blocking)"
    
    - name: Upload duplication reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: duplication-reports
        path: |
          reports/duplications/
          docs/review/

  compliance-summary:
    name: Compliance Summary
    runs-on: ubuntu-latest
    needs: [doc-code-compliance, wiring-validation, key-presence-check, duplicate-dead-code-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate compliance summary
      run: |
        echo "# Doc→Code Compliance Suite Summary" > compliance-summary.md
        echo "" >> compliance-summary.md
        echo "## Job Results" >> compliance-summary.md
        echo "" >> compliance-summary.md
        
        # Check each job result
        if [ "${{ needs.doc-code-compliance.result }}" == "success" ]; then
          echo "✅ Doc→Code Compliance: PASSED" >> compliance-summary.md
        else
          echo "❌ Doc→Code Compliance: FAILED" >> compliance-summary.md
        fi
        
        if [ "${{ needs.wiring-validation.result }}" == "success" ]; then
          echo "✅ Wiring Validation: PASSED" >> compliance-summary.md
        else
          echo "❌ Wiring Validation: FAILED" >> compliance-summary.md
        fi
        
        if [ "${{ needs.key-presence-check.result }}" == "success" ]; then
          echo "✅ Key Presence Check: PASSED" >> compliance-summary.md
        else
          echo "❌ Key Presence Check: FAILED" >> compliance-summary.md
        fi
        
        if [ "${{ needs.duplicate-dead-code-scan.result }}" == "success" ]; then
          echo "✅ Duplicate/Dead Code Scan: PASSED" >> compliance-summary.md
        else
          echo "❌ Duplicate/Dead Code Scan: FAILED" >> compliance-summary.md
        fi
        
        echo "" >> compliance-summary.md
        echo "## Overall Result" >> compliance-summary.md
        echo "" >> compliance-summary.md
        
        # Determine overall result
        if [ "${{ needs.doc-code-compliance.result }}" == "success" ] && \
           [ "${{ needs.wiring-validation.result }}" == "success" ] && \
           [ "${{ needs.key-presence-check.result }}" == "success" ] && \
           [ "${{ needs.duplicate-dead-code-scan.result }}" == "success" ]; then
          echo "🎉 **ALL COMPLIANCE CHECKS PASSED** - Ready for merge!" >> compliance-summary.md
        else
          echo "🚫 **COMPLIANCE CHECKS FAILED** - Merge blocked until issues are resolved." >> compliance-summary.md
        fi
        
        echo "" >> compliance-summary.md
        echo "## Reports Generated" >> compliance-summary.md
        echo "" >> compliance-summary.md
        echo "- **Compliance Reports**: \`reports/compliance/\`" >> compliance-summary.md
        echo "- **Wiring Reports**: \`reports/wiring/\`" >> compliance-summary.md
        echo "- **Duplication Reports**: \`reports/duplications/\`" >> compliance-summary.md
        echo "- **Review Documentation**: \`docs/review/\`" >> compliance-summary.md
    
    - name: Upload compliance summary
      uses: actions/upload-artifact@v3
      with:
        name: compliance-summary
        path: compliance-summary.md
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('compliance-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
