name: 🏢 Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  # 🔒 Security First
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: 🔒 Upload security results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: 🔒 Dependency vulnerability scan
      run: |
        pip install safety pip-audit
        safety check --json --output safety-report.json
        pip-audit --format json --output pip-audit-report.json
    
    - name: 📊 Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          trivy-results.sarif

  # 🧪 Comprehensive Testing
  testing-suite:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: ['3.13']
        os: [ubuntu-latest, windows-latest]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-benchmark
    
    - name: 🧪 Unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
        coverage report --show-missing
    
    - name: 🧪 Integration tests
      run: |
        pytest tests/integration/ -v --cov=. --cov-report=xml
    
    - name: 🧪 E2E tests
      run: |
        pytest tests/e2e/ -v --cov=. --cov-report=xml
    
    - name: 🚀 Performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only
    
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🎨 Code Quality
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy bandit
    
    - name: 🎨 Code formatting check
      run: black --check --diff .
    
    - name: 🔍 Linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 🔍 Type checking
      run: mypy . --ignore-missing-imports
    
    - name: 🔒 Security linting
      run: bandit -r . -f json -o bandit-report.json

  # 🐳 Secure Docker Build
  docker-build:
    name: 🐳 Secure Docker Build
    runs-on: ubuntu-latest
    needs: [testing-suite, code-quality]
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🐳 Build and scan image
      run: |
        # Build image
        docker build -f Dockerfile.enterprise -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        
        # Scan for vulnerabilities
        trivy image --severity HIGH,CRITICAL ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Sign image (if cosign is available)
        if command -v cosign &> /dev/null; then
          cosign sign --key ${{ secrets.COSIGN_KEY }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi
    
    - name: 🐳 Push image
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # 🚀 Atomic Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: 🔐 Set kubectl context
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: 🚀 Deploy to staging
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/universal-knowledge-hub -n knowledge-hub --timeout=300s
    
    - name: 🧪 Smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=universal-knowledge-hub -n knowledge-hub --timeout=300s
        
        # Run smoke tests
        ./scripts/smoke-tests.sh staging
    
    - name: 📊 Health checks
      run: |
        ./scripts/health-check.sh staging

  # 🚀 Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment: production
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: 🔐 Set kubectl context
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: 🚀 Blue-green deployment
      run: |
        # Deploy new version
        kubectl apply -f k8s/production/deployment-blue.yaml
        
        # Wait for blue deployment
        kubectl rollout status deployment/universal-knowledge-hub-blue -n knowledge-hub --timeout=300s
        
        # Run health checks
        ./scripts/health-check.sh production
        
        # Switch traffic to blue
        kubectl apply -f k8s/production/service-blue.yaml
        
        # Run smoke tests
        ./scripts/smoke-tests.sh production
        
        # If successful, update green deployment
        kubectl apply -f k8s/production/deployment-green.yaml
        kubectl rollout status deployment/universal-knowledge-hub-green -n knowledge-hub --timeout=300s
        
        # Switch traffic to green
        kubectl apply -f k8s/production/service-green.yaml
        
        # Clean up blue deployment
        kubectl delete deployment/universal-knowledge-hub-blue -n knowledge-hub
    
    - name: 📊 Post-deployment monitoring
      run: |
        # Monitor for 5 minutes
        for i in {1..30}; do
          ./scripts/health-check.sh production
          sleep 10
        done
    
    - name: 📢 Notify deployment
      run: |
        echo "🚀 Production deployment completed successfully!"
        # Add notification logic (Slack, email, etc.)

  # 📊 Quality Gates
  quality-gates:
    name: 📊 Quality Gates
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
    - name: 📊 Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports-ubuntu-latest-3.13
    
    - name: 📊 Check coverage threshold
      run: |
        if [ -f "coverage.xml" ]; then
          coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "❌ Test coverage below 80% threshold"
            exit 1
          fi
          echo "✅ Test coverage meets threshold"
        fi
    
    - name: 📊 Check security scan results
      run: |
        if [ -f "safety-report.json" ]; then
          high_issues=$(python -c "import json; data=json.load(open('safety-report.json')); print(len([i for i in data if i['severity'] == 'HIGH']))")
          if [ "$high_issues" -gt 0 ]; then
            echo "❌ Found $high_issues high security issues"
            exit 1
          fi
          echo "✅ No high security issues found"
        fi 