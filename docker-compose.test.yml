version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: sarvanom-test-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sarvanom_test}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sarvanom_test_password_2025}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sarvanom_test}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sarvanom-test

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: sarvanom-test-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-sarvanom_redis_test_2025}
    ports:
      - "6379:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sarvanom-test

  # ArangoDB Knowledge Graph
  arangodb:
    image: arangodb/arangodb:latest
    container_name: sarvanom-test-arangodb
    restart: unless-stopped
    environment:
      ARANGO_ROOT_PASSWORD: ${ARANGODB_PASSWORD:-sarvanom_arangodb_test_2025}
      ARANGO_NO_AUTH: 0
    ports:
      - "8529:8529"
    volumes:
      - arangodb_test_data:/var/lib/arangodb3
      - arangodb_test_apps:/var/lib/arangodb3-apps
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8529/_api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sarvanom-test

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: sarvanom-test-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_test_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sarvanom-test

  # Meilisearch Full-Text Search
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: sarvanom-test-meilisearch
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-sarvanom_meili_test_master_key_2025_very_secure}
      MEILI_ENV: development
      MEILI_HTTP_ADDR: 0.0.0.0:7700
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_test_data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sarvanom-test

  # =============================================================================
  # LLM SERVICES
  # =============================================================================

  # Ollama Local LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: sarvanom-test-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_test_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - sarvanom-test

  # =============================================================================
  # STORAGE SERVICES
  # =============================================================================

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: sarvanom-test-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_test_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sarvanom-test

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sarvanom-test-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./test_configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_test_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sarvanom-test

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sarvanom-test-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./test_configs/grafana:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - sarvanom-test

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: sarvanom-test-runner
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      arangodb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      - ENVIRONMENT=testing
      - LOG_LEVEL=DEBUG
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ARANGODB_HOST=arangodb
      - QDRANT_HOST=qdrant
      - MEILI_HOST=meilisearch
      - OLLAMA_HOST=ollama
      - MINIO_HOST=minio
    volumes:
      - ./test_results:/app/test_results
      - ./test_data:/app/test_data
    networks:
      - sarvanom-test
    profiles:
      - testing

  # Backend Service for Testing
  backend-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: sarvanom-backend-test
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=testing
      - LOG_LEVEL=DEBUG
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ARANGODB_HOST=arangodb
      - QDRANT_HOST=qdrant
      - MEILI_HOST=meilisearch
      - OLLAMA_HOST=ollama
      - MINIO_HOST=minio
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      arangodb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./test_results:/app/test_results
      - ./test_data:/app/test_data
    networks:
      - sarvanom-test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  sarvanom-test:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_test_data:
  redis_test_data:
  arangodb_test_data:
  arangodb_test_apps:
  qdrant_test_data:
  meilisearch_test_data:
  ollama_test_data:
  minio_test_data:
  prometheus_test_data:
  grafana_test_data:
