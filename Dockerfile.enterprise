# Enterprise Dockerfile - Universal Knowledge Hub
# Multi-stage build with security best practices

# Stage 1: Base image with security updates
FROM python:3.13-slim as base

# Install system dependencies and security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Stage 2: Dependencies
FROM base as dependencies

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt pyproject.toml ./

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Security scan
FROM dependencies as security-scan

# Copy application code for security scanning
COPY . .

# Install security scanning tools
RUN pip install --no-cache-dir bandit safety pip-audit

# Run security scans
RUN bandit -r . -f json -o bandit-report.json || true
RUN safety check --json --output safety-report.json || true
RUN pip-audit --format json --output pip-audit-report.json || true

# Stage 4: Testing
FROM dependencies as testing

# Copy application code
COPY . .

# Install testing dependencies
RUN pip install --no-cache-dir pytest pytest-cov pytest-asyncio pytest-mock pytest-benchmark

# Run tests
RUN pytest tests/unit/ --cov=. --cov-report=xml --cov-report=html || true
RUN pytest tests/integration/ --cov=. --cov-report=xml || true

# Stage 5: Production
FROM base as production

# Set working directory
WORKDIR /app

# Copy Python dependencies from dependencies stage
COPY --from=dependencies /root/.local /home/appuser/.local

# Note: Security reports and test coverage files are optional and may not exist

# Copy application code
COPY services/ ./services/
COPY shared/ ./shared/
COPY config/ ./config/
COPY scripts/ ./scripts/

# Copy necessary files
COPY pyproject.toml requirements.txt ./

# Set proper permissions
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Add user's local bin to PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Run application
CMD ["python", "-m", "services.api_gateway.main"] 