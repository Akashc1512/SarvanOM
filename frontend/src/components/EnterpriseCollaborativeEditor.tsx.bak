"use client";

import { useState, useEffect, useRef, useCallback } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import {
  socketIOManager,
  type PresenceData,
  type TypingData,
  type DocumentOperation,
  type CursorData,
  type CommentData,
} from "@/lib/socket_io_client";
import { useToast } from "@/hooks/use-toast";
import {
  Users,
  Edit3,
  Save,
  Share2,
  Wifi,
  WifiOff,
  User,
  Clock,
  MessageSquare,
  Eye,
  EyeOff,
  Send,
  Users2,
  AlertCircle,
  CheckCircle,
  XCircle,
} from "lucide-react";

interface EnterpriseCollaborativeEditorProps {
  sessionId: string;
  userId?: string;
  initialContent?: string;
  onContentChange?: (content: string) => void;
  onSave?: (content: string) => void;
  readOnly?: boolean;
}

interface UserPresence {
  userId: string;
  status: "online" | "away" | "busy" | "offline";
  lastSeen: Date;
  color: string;
}

interface UserCursor {
  userId: string;
  position: number;
  selectionStart?: number;
  selectionEnd?: number;
  color: string;
  username: string;
}

interface Comment {
  commentId: string;
  userId: string;
  content: string;
  position: number;
  timestamp: Date;
  replies: Comment[];
  username: string;
}

export function EnterpriseCollaborativeEditor({
  sessionId,
  userId = "anonymous",
  initialContent = "",
  onContentChange,
  onSave,
  readOnly = false,
}: EnterpriseCollaborativeEditorProps) {
  const { toast } = useToast();
  const [content, setContent] = useState(initialContent);
  const [isConnected, setIsConnected] = useState(false);
  const [activeUsers, setActiveUsers] = useState<UserPresence[]>([]);
  const [userCursors, setUserCursors] = useState<UserCursor[]>([]);
  const [typingUsers, setTypingUsers] = useState<string[]>([]);
  const [comments, setComments] = useState<Comment[]>([]);
  const [showComments, setShowComments] = useState(false);
  const [showPresence, setShowPresence] = useState(true);
  const [documentVersion, setDocumentVersion] = useState(0);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const lastCursorPosition = useRef(0);
  const lastContentLength = useRef(initialContent.length);
  const debounceTimer = useRef<NodeJS.Timeout | null>(null);
  const commentInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    // Connect to Socket.IO
    const connectSocket = async () => {
      try {
        await socketIOManager.connect();
        setIsConnected(true);

        // Join room
        socketIOManager.joinRoom(sessionId);

        // Set up event listeners
        setupEventListeners();

        toast({
          title: "Connected",
          description: "Real-time collaboration enabled",
        });
      } catch (error) {
        console.error("Failed to connect:", error);
        toast({
          title: "Connection Failed",
          description: "Unable to connect to collaboration server",
          variant: "destructive",
        });
      }
    };

    connectSocket();

    return () => {
      socketIOManager.leaveRoom(roomId);
      socketIOManager.disconnect();
    };
  }, [sessionId, userId, toast]);

  const setupEventListeners = useCallback(() => {
    // Connection events
    socketIOManager.on("connected", () => {
      setIsConnected(true);
    });

    socketIOManager.on("disconnected", () => {
      setIsConnected(false);
    });

    // Room events
    socketIOManager.on("room_joined", (data: any) => {
      setDocumentVersion(data.document_version);
      setContent(data.document_content);
      setActiveUsers(
        data.participants.map((participant: string) => ({
          userId: participant,
          status: "online" as const,
          lastSeen: new Date(),
          color: `hsl(${Math.random() * 360}, 70%, 50%)`,
        })),
      );
    });

    socketIOManager.on("user_joined", (data: any) => {
      setActiveUsers((prev) => {
        const existing = prev.find((u) => u.userId === data.user_id);
        if (!existing) {
          return [
            ...prev,
            {
              userId: data.user_id,
              status: "online" as const,
              lastSeen: new Date(),
              color: `hsl(${Math.random() * 360}, 70%, 50%)`,
            },
          ];
        }
        return prev;
      });
    });

    socketIOManager.on("user_left", (data: any) => {
      setActiveUsers((prev) => prev.filter((u) => u.userId !== data.user_id));
      setUserCursors((prev) => prev.filter((c) => c.userId !== data.user_id));
    });

    // Document events
    socketIOManager.on("document_updated", (data: any) => {
      if (data.operation.user_id !== userId) {
        applyDocumentOperation(data.operation);
        setDocumentVersion((prev) => prev + 1);
        setHasUnsavedChanges(true);
      }
    });

    // Cursor events
    socketIOManager.on("cursor_updated", (data: any) => {
      if (data.user_id !== userId) {
        setUserCursors((prev) => {
          const existing = prev.find((c) => c.userId === data.user_id);
          if (existing) {
            return prev.map((c) =>
              c.userId === data.user_id
                ? {
                    ...c,
                    position: data.position,
                    selectionStart: data.selection_start,
                    selectionEnd: data.selection_end,
                  }
                : c,
            );
          } else {
            return [
              ...prev,
              {
                userId: data.user_id,
                position: data.position,
                selectionStart: data.selection_start,
                selectionEnd: data.selection_end,
                color: `hsl(${Math.random() * 360}, 70%, 50%)`,
                username: data.user_id,
              },
            ];
          }
        });
      }
    });

    // Typing events
    socketIOManager.on("typing_started", (data: any) => {
      if (data.user_id !== userId) {
        setTypingUsers((prev) => {
          if (!prev.includes(data.user_id)) {
            return [...prev, data.user_id];
          }
          return prev;
        });
      }
    });

    socketIOManager.on("typing_stopped", (data: any) => {
      setTypingUsers((prev) => prev.filter((id) => id !== data.user_id));
    });

    // Presence events
    socketIOManager.on("presence_updated", (data: PresenceData) => {
      setActiveUsers((prev) => {
        const existing = prev.find((u) => u.userId === data.user_id);
        if (existing) {
          return prev.map((u) =>
            u.userId === data.user_id
              ? { ...u, status: data.status, lastSeen: new Date() }
              : u,
          );
        }
        return prev;
      });
    });

    // Comment events
    socketIOManager.on(
      "comment_added",
      (data: CommentData & { room_id: string }) => {
        const newComment: Comment = {
          commentId: data.comment_id,
          userId: data.user_id,
          content: data.content,
          position: data.position,
          timestamp: new Date(data.timestamp),
          replies: [],
          username: data.user_id,
        };
        setComments((prev) => [...prev, newComment]);
      },
    );

    socketIOManager.on(
      "comment_updated",
      (data: CommentData & { room_id: string }) => {
        setComments((prev) =>
          prev.map((c) =>
            c.commentId === data.comment_id
              ? { ...c, content: data.content }
              : c,
          ),
        );
      },
    );

    socketIOManager.on(
      "comment_deleted",
      (data: { room_id: string; comment_id: string }) => {
        setComments((prev) =>
          prev.filter((c) => c.commentId !== data.comment_id),
        );
      },
    );

    // Error events
    socketIOManager.on("error", (error: any) => {
      console.error("Socket.IO error:", error);
      toast({
        title: "Connection Error",
        description: "Lost connection to collaboration server",
        variant: "destructive",
      });
    });
  }, [userId, toast]);

  const applyDocumentOperation = useCallback((operation: DocumentOperation) => {
    setContent((prevContent) => {
      let newContent = prevContent;

      switch (operation.type) {
        case "insert":
          newContent =
            prevContent.slice(0, operation.position) +
            (operation.text || "") +
            prevContent.slice(operation.position);
          break;
        case "delete":
          newContent =
            prevContent.slice(0, operation.position) +
            prevContent.slice(operation.position + (operation.length || 0));
          break;
        case "retain":
          // No change needed for retain operations
          break;
      }

      return newContent;
    });
  }, []);

  const handleContentChange = useCallback(
    (newContent: string) => {
      setContent(newContent);
      setHasUnsavedChanges(true);
      onContentChange?.(newContent);

      // Debounce document updates
      if (debounceTimer.current) {
        clearTimeout(debounceTimer.current);
      }

      debounceTimer.current = setTimeout(() => {
        const cursorPosition = textareaRef.current?.selectionStart || 0;

        // Calculate operation based on content change
        if (newContent.length > lastContentLength.current) {
          // Text was inserted
          const insertedText = newContent.slice(lastContentLength.current);
          const operation: Omit<
            DocumentOperation,
            "operation_id" | "user_id" | "timestamp"
          > = {
            type: "insert",
            position: cursorPosition - insertedText.length,
            text: insertedText,
          };
          socketIOManager.updateDocument(operation);
        } else if (newContent.length < lastContentLength.current) {
          // Text was deleted
          const operation: Omit<
            DocumentOperation,
            "operation_id" | "user_id" | "timestamp"
          > = {
            type: "delete",
            position: cursorPosition,
            length: lastContentLength.current - newContent.length,
          };
          socketIOManager.updateDocument(operation);
        }

        lastContentLength.current = newContent.length;
      }, 300);
    },
    [onContentChange],
  );

  const handleCursorMove = useCallback(() => {
    const cursorPosition = textareaRef.current?.selectionStart || 0;
    if (cursorPosition !== lastCursorPosition.current) {
      socketIOManager.updateCursor(roomId, { x: cursorPosition, y: 0 });
      lastCursorPosition.current = cursorPosition;
    }
  }, []);

  const handleTyping = useCallback(() => {
    socketIOManager.startTyping(roomId);
  }, []);

  const handleSave = useCallback(() => {
    onSave?.(content);
    setLastSaved(new Date());
    setHasUnsavedChanges(false);
    toast({
      title: "Content saved",
      description: "Your collaborative document has been saved",
    });
  }, [content, onSave, toast]);

  const handleShare = useCallback(() => {
    const shareUrl = `${window.location.origin}/collaborate/${sessionId}`;
    navigator.clipboard.writeText(shareUrl);
    toast({
      title: "Link copied",
      description: "Collaboration link copied to clipboard",
    });
  }, [sessionId, toast]);

  const handleAddComment = useCallback(() => {
    const commentContent = commentInputRef.current?.value;
    if (commentContent && commentContent.trim()) {
      const cursorPosition = textareaRef.current?.selectionStart || 0;
      socketIOManager.addComment(commentContent.trim(), cursorPosition);
      commentInputRef.current!.value = "";
    }
  }, []);

  const getPresenceIcon = (status: string) => {
    switch (status) {
      case "online":
        return <CheckCircle className="h-3 w-3 text-green-500" />;
      case "away":
        return <Clock className="h-3 w-3 text-yellow-500" />;
      case "busy":
        return <AlertCircle className="h-3 w-3 text-red-500" />;
      case "offline":
        return <XCircle className="h-3 w-3 text-gray-500" />;
      default:
        return <User className="h-3 w-3" />;
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
      {/* Main Editor */}
      <div className="lg:col-span-3">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <Edit3 className="h-5 w-5" />
                  Enterprise Collaborative Editor
                </CardTitle>
                <CardDescription>
                  Real-time collaborative editing with {activeUsers.length}{" "}
                  users
                  {typingUsers.length > 0 &&
                    ` • ${typingUsers.join(", ")} typing...`}
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant={isConnected ? "default" : "secondary"}>
                  {isConnected ? (
                    <Wifi className="h-3 w-3 mr-1" />
                  ) : (
                    <WifiOff className="h-3 w-3 mr-1" />
                  )}
                  {isConnected ? "Connected" : "Disconnected"}
                </Badge>
                {hasUnsavedChanges && (
                  <Badge variant="outline" className="text-orange-600">
                    Unsaved changes
                  </Badge>
                )}
                <Button variant="outline" size="sm" onClick={handleShare}>
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button
                  size="sm"
                  onClick={handleSave}
                  disabled={!hasUnsavedChanges}
                >
                  <Save className="h-4 w-4 mr-2" />
                  Save
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {/* Active Users */}
            {activeUsers.length > 0 && (
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Users2 className="h-4 w-4" />
                  <span className="text-sm font-medium">Active Users:</span>
                </div>
                <div className="flex flex-wrap gap-2">
                  {activeUsers.map((user) => (
                    <Badge
                      key={user.userId}
                      variant="outline"
                      className="flex items-center gap-1"
                    >
                      {getPresenceIcon(user.status)}
                      {user.userId === userId ? "You" : user.userId}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Collaborative Textarea */}
            <div className="relative">
              <Textarea
                ref={textareaRef}
                value={content}
                onChange={(e) => handleContentChange(e.target.value)}
                onSelect={handleCursorMove}
                onKeyUp={handleCursorMove}
                onMouseUp={handleCursorMove}
                onKeyDown={handleTyping}
                placeholder="Start typing to collaborate in real-time..."
                className="min-h-[400px] font-mono text-sm"
                disabled={!isConnected || readOnly}
              />

              {/* Cursor indicators */}
              {userCursors.map((cursor, index) => (
                <div
                  key={cursor.userId}
                  className="absolute pointer-events-none"
                  style={{
                    left: `${(cursor.position / content.length) * 100}%`,
                    top: "0",
                    width: "2px",
                    height: "100%",
                    backgroundColor: cursor.color,
                    zIndex: 10 + index,
                  }}
                >
                  <div
                    className="absolute -top-6 left-0 px-2 py-1 text-xs text-white rounded"
                    style={{ backgroundColor: cursor.color }}
                  >
                    {cursor.username}
                  </div>
                </div>
              ))}
            </div>

            {/* Connection Status */}
            {!isConnected && (
              <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <WifiOff className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm text-yellow-800">
                    Connection lost. Attempting to reconnect...
                  </span>
                </div>
              </div>
            )}

            {/* Session Info */}
            <div className="mt-4 text-xs text-gray-500">
              Session ID: {sessionId} • Version: {documentVersion} • Last saved:{" "}
              {lastSaved ? lastSaved.toLocaleTimeString() : "Never"}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Sidebar */}
      <div className="lg:col-span-1 space-y-4">
        {/* Presence Panel */}
        {showPresence && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                Presence
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {activeUsers.map((user) => (
                  <div key={user.userId} className="flex items-center gap-2">
                    {getPresenceIcon(user.status)}
                    <span className="text-sm">
                      {user.userId === userId ? "You" : user.userId}
                    </span>
                    <Badge variant="outline">
                      {user.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Comments Panel */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Comments
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowComments(!showComments)}
              >
                {showComments ? (
                  <EyeOff className="h-4 w-4" />
                ) : (
                  <Eye className="h-4 w-4" />
                )}
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {showComments && (
              <div className="space-y-4">
                {/* Add Comment */}
                <div className="flex gap-2">
                  <Input
                    ref={commentInputRef}
                    placeholder="Add a comment..."
                    className="flex-1"
                    onKeyPress={(e) => e.key === "Enter" && handleAddComment()}
                  />
                  <Button size="sm" onClick={handleAddComment}>
                    <Send className="h-4 w-4" />
                  </Button>
                </div>

                {/* Comments List */}
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {comments.map((comment) => (
                    <div
                      key={comment.commentId}
                      className="p-2 bg-gray-50 rounded"
                    >
                      <div className="flex items-center gap-2 mb-1">
                        <span className="text-xs font-medium">
                          {comment.username}
                        </span>
                        <span className="text-xs text-gray-500">
                          {comment.timestamp.toLocaleTimeString()}
                        </span>
                      </div>
                      <p className="text-sm">{comment.content}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
